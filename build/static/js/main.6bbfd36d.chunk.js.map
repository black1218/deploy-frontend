{"version":3,"sources":["connection.tsx","utils.ts","MintButton.tsx","MultiMintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","candy-machine.ts"],"names":["SequenceType","sendTransactions","connection","wallet","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","console","log","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","StopOnFailure","Promise","all","number","txs","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","toDate","toNumber","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","anchor","PublicKey","CIVIC","getAtaForMint","mint","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","state","onClick","gatekeeper","variant","CircularProgress","goLiveDate","Minus","button","Plus","NumericField","input","MultiMintButton","price","mintCount","setMintCount","totalCost","setTotalCost","updateAmounts","qty","Math","round","numericField","document","querySelector","parseInt","isNaN","decrementValue","type","className","step","min","max","onChange","target","updateMintCount","incrementValue","cluster","process","decimals","splTokenName","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","Card","MintButtonContainer","SolExplorerLink","a","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BorderLinearProgress","LinearProgress","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","severity","undefined","alertState","setAlertState","useAnchorWallet","setCandyMachine","rpcUrl","rpcHost","displaySuccess","mintPublicKey","remaining","throwConfetti","confetti","particleCount","spread","origin","y","mintMany","quantityString","program","quantity","Number","futureBalance","mintMultipleToken","signedTransactions","promiseArray","index","tx","txTimeout","allTransactionsResult","totalSuccess","totalFailure","transactionStatus","retry","getBalance","LAMPORTS_PER_SOL","newBalance","mintOne","Keypair","generate","mintOneToken","mintTxId","startMint","msg","code","indexOf","getCandyMachineState","candyMachineId","cndy","divider","Array","join","tokenMint","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getTokenAccountBalance","tokenBalance","uiAmount","endSettings","endSettingType","date","amount","limit","toLocaleString","elevation","label","src","alt","now","onMount","completed","onComplete","renderer","days","hours","minutes","signTransaction","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","seconds","href","Snackbar","autoHideDuration","onClose","Alert","require","network","Connection","theme","createTheme","palette","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","anchorWallet","provider","preflightCommitment","fetchIdl","idl","account","fetch","id","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","signersMatrix","instructionsMatrix","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","expireOnUse","whitelistToken","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t"],"mappings":"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","file":"static/js/main.6bbfd36d.chunk.js","sourcesContent":["import {\r\n    Keypair,\r\n    Commitment,\r\n    Connection,\r\n    RpcResponseAndContext,\r\n    SignatureStatus,\r\n    SimulatedTransactionResponse,\r\n    Transaction,\r\n    TransactionInstruction,\r\n    TransactionSignature,\r\n    Blockhash,\r\n    FeeCalculator,\r\n  } from '@solana/web3.js';\r\n  \r\n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n  \r\n  interface BlockhashAndFeeCalculator {\r\n    blockhash: Blockhash;\r\n    feeCalculator: FeeCalculator;\r\n  }\r\n  \r\n  export const getErrorForTransaction = async (\r\n    connection: Connection,\r\n    txid: string,\r\n  ) => {\r\n    // wait for all confirmation before geting transaction\r\n    await connection.confirmTransaction(txid, 'max');\r\n  \r\n    const tx = await connection.getParsedConfirmedTransaction(txid);\r\n  \r\n    const errors: string[] = [];\r\n    if (tx?.meta && tx.meta.logMessages) {\r\n      tx.meta.logMessages.forEach(log => {\r\n        const regex = /Error: (.*)/gm;\r\n        let m;\r\n        while ((m = regex.exec(log)) !== null) {\r\n          // This is necessary to avoid infinite loops with zero-width matches\r\n          if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n          }\r\n  \r\n          if (m.length > 1) {\r\n            errors.push(m[1]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  \r\n    return errors;\r\n  };\r\n  \r\n  export enum SequenceType {\r\n    Sequential,\r\n    Parallel,\r\n    StopOnFailure,\r\n  }\r\n  \r\n  export async function sendTransactionsWithManualRetry(\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[][],\r\n    signers: Keypair[][],\r\n  ): Promise<(string | undefined)[]> {\r\n    let stopPoint = 0;\r\n    let tries = 0;\r\n    let lastInstructionsLength = null;\r\n    let toRemoveSigners: Record<number, boolean> = {};\r\n    instructions = instructions.filter((instr, i) => {\r\n      if (instr.length > 0) {\r\n        return true;\r\n      } else {\r\n        toRemoveSigners[i] = true;\r\n        return false;\r\n      }\r\n    });\r\n    let ids: string[] = [];\r\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n  \r\n    while (stopPoint < instructions.length && tries < 3) {\r\n      instructions = instructions.slice(stopPoint, instructions.length);\r\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n  \r\n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n      else tries = 0;\r\n  \r\n      try {\r\n        if (instructions.length === 1) {\r\n          const id = await sendTransactionWithRetry(\r\n            connection,\r\n            wallet,\r\n            instructions[0],\r\n            filteredSigners[0],\r\n            'single',\r\n          );\r\n          ids.push(id.txid);\r\n          stopPoint = 1;\r\n        } else {\r\n          const { txs } = await sendTransactions(\r\n            connection,\r\n            wallet,\r\n            instructions,\r\n            filteredSigners,\r\n            SequenceType.StopOnFailure,\r\n            'single',\r\n          );\r\n          ids = ids.concat(txs.map(t => t.txid));\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      console.log(\r\n        'Died on ',\r\n        stopPoint,\r\n        'retrying from instruction',\r\n        instructions[stopPoint],\r\n        'instructions length is',\r\n        instructions.length,\r\n      );\r\n      lastInstructionsLength = instructions.length;\r\n    }\r\n  \r\n    return ids;\r\n  }\r\n  \r\n  export const sendTransactions = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructionSet: TransactionInstruction[][],\r\n    signersSet: Keypair[][],\r\n    sequenceType: SequenceType = SequenceType.Parallel,\r\n    commitment: Commitment = 'singleGossip',\r\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\r\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n    block?: BlockhashAndFeeCalculator,\r\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    const unsignedTxns: Transaction[] = [];\r\n  \r\n    if (!block) {\r\n      block = await connection.getRecentBlockhash(commitment);\r\n    }\r\n  \r\n    for (let i = 0; i < instructionSet.length; i++) {\r\n      const instructions = instructionSet[i];\r\n      const signers = signersSet[i];\r\n  \r\n      if (instructions.length === 0) {\r\n        continue;\r\n      }\r\n  \r\n      let transaction = new Transaction();\r\n      instructions.forEach(instruction => transaction.add(instruction));\r\n      transaction.recentBlockhash = block.blockhash;\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n  \r\n      if (signers.length > 0) {\r\n        transaction.partialSign(...signers);\r\n      }\r\n  \r\n      unsignedTxns.push(transaction);\r\n    }\r\n  \r\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n  \r\n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n  \r\n    let breakEarlyObject = { breakEarly: false, i: 0 };\r\n    console.log(\r\n      'Signed txns length',\r\n      signedTxns.length,\r\n      'vs handed in length',\r\n      instructionSet.length,\r\n    );\r\n    for (let i = 0; i < signedTxns.length; i++) {\r\n      const signedTxnPromise = sendSignedTransaction({\r\n        connection,\r\n        signedTransaction: signedTxns[i],\r\n      });\r\n  \r\n      signedTxnPromise\r\n        .then(({ txid, slot }) => {\r\n          successCallback(txid, i);\r\n        })\r\n        .catch(reason => {\r\n          // @ts-ignore\r\n          failCallback(signedTxns[i], i);\r\n          if (sequenceType === SequenceType.StopOnFailure) {\r\n            breakEarlyObject.breakEarly = true;\r\n            breakEarlyObject.i = i;\r\n          }\r\n        });\r\n  \r\n      if (sequenceType !== SequenceType.Parallel) {\r\n        try {\r\n          await signedTxnPromise;\r\n        } catch (e) {\r\n          console.log('Caught failure', e);\r\n          if (breakEarlyObject.breakEarly) {\r\n            console.log('Died on ', breakEarlyObject.i);\r\n            // Return the txn we failed on by index\r\n            return {\r\n              number: breakEarlyObject.i,\r\n              txs: await Promise.all(pendingTxns),\r\n            };\r\n          }\r\n        }\r\n      } else {\r\n        pendingTxns.push(signedTxnPromise);\r\n      }\r\n    }\r\n  \r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      await Promise.all(pendingTxns);\r\n    }\r\n  \r\n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n  };\r\n  \r\n  export const sendTransaction = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    awaitConfirmation = true,\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n  ) => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n  \r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n  \r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  \r\n    const rawTransaction = transaction.serialize();\r\n    let options = {\r\n      skipPreflight: true,\r\n      commitment,\r\n    };\r\n  \r\n    const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n    let slot = 0;\r\n  \r\n    if (awaitConfirmation) {\r\n      const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        DEFAULT_TIMEOUT,\r\n        connection,\r\n        commitment,\r\n      );\r\n  \r\n      if (!confirmation)\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n      slot = confirmation?.slot || 0;\r\n  \r\n      if (confirmation?.err) {\r\n        const errors = await getErrorForTransaction(connection, txid);\r\n  \r\n        console.log(errors);\r\n        throw new Error(`Raw transaction ${txid} failed`);\r\n      }\r\n    }\r\n  \r\n    return { txid, slot };\r\n  };\r\n  \r\n  export const sendTransactionWithRetry = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeSend?: () => void,\r\n  ) => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n  \r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n  \r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  \r\n    if (beforeSend) {\r\n      beforeSend();\r\n    }\r\n  \r\n    const { txid, slot } = await sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: transaction,\r\n    });\r\n  \r\n    return { txid, slot };\r\n  };\r\n  \r\n  export const getUnixTs = () => {\r\n    return new Date().getTime() / 1000;\r\n  };\r\n  \r\n  const DEFAULT_TIMEOUT = 30000;\r\n  \r\n  export async function sendSignedTransaction({\r\n    signedTransaction,\r\n    connection,\r\n    timeout = DEFAULT_TIMEOUT,\r\n  }: {\r\n    signedTransaction: Transaction;\r\n    connection: Connection;\r\n    sendingMessage?: string;\r\n    sentMessage?: string;\r\n    successMessage?: string;\r\n    timeout?: number;\r\n  }): Promise<{ txid: string; slot: number }> {\r\n    const rawTransaction = signedTransaction.serialize();\r\n    const startTime = getUnixTs();\r\n    let slot = 0;\r\n    const txid: TransactionSignature = await connection.sendRawTransaction(\r\n      rawTransaction,\r\n      {\r\n        skipPreflight: true,\r\n      },\r\n    );\r\n  \r\n    console.log('Started awaiting confirmation for', txid);\r\n  \r\n    let done = false;\r\n    (async () => {\r\n      while (!done && getUnixTs() - startTime < timeout) {\r\n        connection.sendRawTransaction(rawTransaction, {\r\n          skipPreflight: true,\r\n        });\r\n        await sleep(500);\r\n      }\r\n    })();\r\n    try {\r\n      const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        timeout,\r\n        connection,\r\n        'recent',\r\n        true,\r\n      );\r\n  \r\n      if (!confirmation)\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n  \r\n      if (confirmation.err) {\r\n        console.error(confirmation.err);\r\n        throw new Error('Transaction failed: Custom instruction error');\r\n      }\r\n  \r\n      slot = confirmation?.slot || 0;\r\n    } catch (err: any) {\r\n      console.error('Timeout Error caught', err);\r\n      if (err.timeout) {\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n      }\r\n      let simulateResult: SimulatedTransactionResponse | null = null;\r\n      try {\r\n        simulateResult = (\r\n          await simulateTransaction(connection, signedTransaction, 'single')\r\n        ).value;\r\n      } catch (e) { }\r\n      if (simulateResult && simulateResult.err) {\r\n        if (simulateResult.logs) {\r\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n            const line = simulateResult.logs[i];\r\n            if (line.startsWith('Program log: ')) {\r\n              throw new Error(\r\n                'Transaction failed: ' + line.slice('Program log: '.length),\r\n              );\r\n            }\r\n          }\r\n        }\r\n        throw new Error(JSON.stringify(simulateResult.err));\r\n      }\r\n      // throw new Error('Transaction failed');\r\n    } finally {\r\n      done = true;\r\n    }\r\n  \r\n    console.log('Latency', txid, getUnixTs() - startTime);\r\n    return { txid, slot };\r\n  }\r\n  \r\n  async function simulateTransaction(\r\n    connection: Connection,\r\n    transaction: Transaction,\r\n    commitment: Commitment,\r\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n    // @ts-ignore\r\n    transaction.recentBlockhash = await connection._recentBlockhash(\r\n      // @ts-ignore\r\n      connection._disableBlockhashCaching,\r\n    );\r\n  \r\n    const signData = transaction.serializeMessage();\r\n    // @ts-ignore\r\n    const wireTransaction = transaction._serialize(signData);\r\n    const encodedTransaction = wireTransaction.toString('base64');\r\n    const config: any = { encoding: 'base64', commitment };\r\n    const args = [encodedTransaction, config];\r\n  \r\n    // @ts-ignore\r\n    const res = await connection._rpcRequest('simulateTransaction', args);\r\n    if (res.error) {\r\n      throw new Error('failed to simulate transaction: ' + res.error.message);\r\n    }\r\n    return res.result;\r\n  }\r\n  \r\n  async function awaitTransactionSignatureConfirmation(\r\n    txid: TransactionSignature,\r\n    timeout: number,\r\n    connection: Connection,\r\n    commitment: Commitment = 'recent',\r\n    queryStatus = false,\r\n  ): Promise<SignatureStatus | null | void> {\r\n    let done = false;\r\n    let status: SignatureStatus | null | void = {\r\n      slot: 0,\r\n      confirmations: 0,\r\n      err: null,\r\n    };\r\n    let subId = 0;\r\n    status = await new Promise(async (resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (done) {\r\n          return;\r\n        }\r\n        done = true;\r\n        console.log('Rejecting for timeout...');\r\n        reject({ timeout: true });\r\n      }, timeout);\r\n      try {\r\n        subId = connection.onSignature(\r\n          txid,\r\n          (result, context) => {\r\n            done = true;\r\n            status = {\r\n              err: result.err,\r\n              slot: context.slot,\r\n              confirmations: 0,\r\n            };\r\n            if (result.err) {\r\n              console.log('Rejected via websocket', result.err);\r\n              reject(status);\r\n            } else {\r\n              console.log('Resolved via websocket', result);\r\n              resolve(status);\r\n            }\r\n          },\r\n          commitment,\r\n        );\r\n      } catch (e) {\r\n        done = true;\r\n        console.error('WS error in setup', txid, e);\r\n      }\r\n      while (!done && queryStatus) {\r\n        // eslint-disable-next-line no-loop-func\r\n        (async () => {\r\n          try {\r\n            const signatureStatuses = await connection.getSignatureStatuses([\r\n              txid,\r\n            ]);\r\n            status = signatureStatuses && signatureStatuses.value[0];\r\n            if (!done) {\r\n              if (!status) {\r\n                console.log('REST null result for', txid, status);\r\n              } else if (status.err) {\r\n                console.log('REST error for', txid, status);\r\n                done = true;\r\n                reject(status.err);\r\n              } else if (!status.confirmations) {\r\n                console.log('REST no confirmations for', txid, status);\r\n              } else {\r\n                console.log('REST confirmation for', txid, status);\r\n                done = true;\r\n                resolve(status);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            if (!done) {\r\n              console.log('REST connection error: txid', txid, e);\r\n            }\r\n          }\r\n        })();\r\n        await sleep(2000);\r\n      }\r\n    });\r\n  \r\n    //@ts-ignore\r\n    if (connection._signatureSubscriptions[subId])\r\n      connection.removeSignatureListener(subId);\r\n    done = true;\r\n    console.log('Returning status', status);\r\n    return status;\r\n  }\r\n  export function sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n  ","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\r\nimport {CandyMachine} from './candy-machine';\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  display: block !important;\r\n  margin: 0 auto !important;\r\n  background-color: var(--title-text-color) !important;\r\n  min-width: 120px !important;\r\n  font-size: 1em !important;\r\n`;\r\n\r\nexport const MintButton = ({\r\n                               onMint,\r\n                               candyMachine,\r\n                               isMinting,\r\n                               isEnded,\r\n                               isActive,\r\n                               isSoldOut\r\n                           }: {\r\n    onMint: (quantityString: number) => Promise<void>;\r\n    candyMachine: CandyMachine | undefined;\r\n    isMinting: boolean;\r\n    isEnded: boolean;\r\n    isActive: boolean;\r\n    isSoldOut: boolean;\r\n}) => {\r\n    const {requestGatewayToken, gatewayStatus} = useGateway();\r\n    const [clicked, setClicked] = useState(false);\r\n    const [isVerifying, setIsVerifying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsVerifying(false);\r\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\r\n            // when user approves wallet verification txn\r\n            setIsVerifying(true);\r\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n            console.log('Verified human, now minting...');\r\n            onMint(1);\r\n            setClicked(false);\r\n        }\r\n    }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n    return (\r\n        <CTAButton\r\n            disabled={\r\n                clicked ||\r\n                candyMachine?.state.isSoldOut ||\r\n                isSoldOut ||\r\n                isMinting ||\r\n                isEnded ||\r\n                !isActive ||\r\n                isVerifying\r\n            }\r\n            onClick={async () => {\r\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\r\n                    console.log('Requesting gateway token');\r\n                    setClicked(true);\r\n                    await requestGatewayToken();\r\n                } else {\r\n                    console.log('Minting...');\r\n                    await onMint(1);\r\n                }\r\n            }}\r\n            variant=\"contained\"\r\n        >\r\n            {!candyMachine ? (\r\n                \"CONNECTING...\"\r\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\r\n                'SOLD OUT'\r\n            ) : isActive ? (\r\n                isVerifying ? 'VERIFYING...' :\r\n                    isMinting || clicked ? (\r\n                        <CircularProgress/>\r\n                    ) : (\r\n                        \"MINT\"\r\n                    )\r\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\r\n                \"SOON\"\r\n            ) : (\r\n                \"UNAVAILABLE\"\r\n            ))}\r\n        </CTAButton>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\r\nimport {CandyMachine} from './candy-machine';\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  display: inline-block !important;\r\n  margin: 0 auto !important;\r\n  background-color: var(--title-text-color) !important;\r\n  min-width: 120px !important;\r\n  font-size: 1em !important;\r\n`;\r\n\r\nexport const Minus = styled.button`\r\n  margin-left: 30px;\r\n  width: 40px;\r\n  height: 40px;\r\n  font-size: 1.3em;\r\n  font-weight: bold;\r\n  line-height: 0.5px;\r\n  color: var(--main-text-color);\r\n  background: var(--title-text-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  border: 0;\r\n  border-radius: 50%;\r\n  box-sizing: border-box;\r\n  font-family: 'Patrick Hand', cursive;\r\n  vertical-align: middle;\r\n\r\n  :not(disabled) {\r\n    cursor: pointer;\r\n  }\r\n\r\n  :not(disabled):hover {\r\n    outline: 1px solid var(--title-text-color)\r\n  }\r\n`;\r\n\r\nexport const Plus = styled(Minus)`\r\n  margin-left: 0;\r\n`;\r\n\r\nexport const NumericField = styled.input`\r\n  font-size: 1.3em !important;\r\n  padding: 4px 4px 4px 16px;\r\n  width: 50px;\r\n  vertical-align: middle;\r\n  background-color: var(--main-text-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  box-sizing: border-box;\r\n  font-family: 'Patrick Hand', cursive;\r\n  font-weight: 500;\r\n  line-height: 1;\r\n  border-radius: 8px;\r\n  transition: all 0.4s ease;\r\n  -moz-appearance: textfield;\r\n  -webkit-appearance: none;\r\n  margin: 0 10px;\r\n\r\n  :hover, :focus {\r\n    box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 40%), 0px 6px 10px 0px rgb(0 0 0 / 34%), 0px 1px 18px 0px rgb(0 0 0 / 32%);\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n`;\r\n\r\n\r\nexport const MultiMintButton = ({\r\n                                    onMint,\r\n                                    candyMachine,\r\n                                    isMinting,\r\n                                    isEnded,\r\n                                    isActive,\r\n                                    isSoldOut,\r\n                                    price\r\n                                }: {\r\n    onMint: (quantityString: number) => Promise<void>;\r\n    candyMachine: CandyMachine | undefined;\r\n    isMinting: boolean;\r\n    isEnded: boolean;\r\n    isActive: boolean;\r\n    isSoldOut: boolean;\r\n    price: number;\r\n}) => {\r\n    const {requestGatewayToken, gatewayStatus} = useGateway();\r\n    const [clicked, setClicked] = useState(false);\r\n    const [isVerifying, setIsVerifying] = useState(false);\r\n    const [mintCount, setMintCount] = useState(1);\r\n    const [totalCost, setTotalCost] = useState(mintCount * (price + 0.012));\r\n\r\n    useEffect(() => {\r\n        setIsVerifying(false);\r\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\r\n            // when user approves wallet verification txn\r\n            setIsVerifying(true);\r\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n            console.log('Verified human, now minting...');\r\n            onMint(mintCount);\r\n            setClicked(false);\r\n        }\r\n    }, [gatewayStatus, clicked, setClicked, mintCount, setMintCount, onMint]);\r\n\r\n    function incrementValue() {\r\n        var numericField = document.querySelector(\".mint-qty\") as HTMLInputElement;\r\n        if (numericField) {\r\n            var value = parseInt(numericField.value);\r\n            if (!isNaN(value) && value < 10) {\r\n                value++;\r\n                numericField.value = \"\" + value;\r\n                updateAmounts(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function decrementValue() {\r\n        var numericField = document.querySelector(\".mint-qty\") as HTMLInputElement;\r\n        if (numericField) {\r\n            var value = parseInt(numericField.value);\r\n            if (!isNaN(value) && value > 1) {\r\n                value--;\r\n                numericField.value = \"\" + value;\r\n                updateAmounts(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateMintCount(target: any) {\r\n        var value = parseInt(target.value);\r\n        if (!isNaN(value)) {\r\n            if (value > 10) {\r\n                value = 10;\r\n                target.value = \"\" + value;\r\n            } else if (value < 1) {\r\n                value = 1;\r\n                target.value = \"\" + value;\r\n            }\r\n            updateAmounts(value);\r\n        }\r\n    }\r\n\r\n    function updateAmounts(qty: number) {\r\n        setMintCount(qty);\r\n        setTotalCost(Math.round(qty * (price + 0.012) * 1000) / 1000);  // 0.012 = approx of account creation fees\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <CTAButton\r\n                    disabled={\r\n                        clicked ||\r\n                        candyMachine?.state.isSoldOut ||\r\n                        isSoldOut ||\r\n                        isMinting ||\r\n                        isEnded ||\r\n                        !isActive ||\r\n                        isVerifying\r\n                    }\r\n                    onClick={async () => {\r\n                        if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\r\n                            console.log('Requesting gateway token');\r\n                            setClicked(true);\r\n                            await requestGatewayToken();\r\n                        } else {\r\n                            console.log('Minting...');\r\n                            await onMint(mintCount);\r\n                        }\r\n                    }}\r\n                    variant=\"contained\"\r\n                >\r\n                    {!candyMachine ? (\r\n                        \"CONNECTING...\"\r\n                    ) : candyMachine?.state.isSoldOut || isSoldOut ? (\r\n                        'SOLD OUT'\r\n                    ) : isActive ? (\r\n                        isVerifying ? 'VERIFYING...' :\r\n                            isMinting || clicked ? (\r\n                                <CircularProgress/>\r\n                            ) : (\r\n                                `MINT ${mintCount}`\r\n                            )\r\n                    ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\r\n                        \"SOON\"\r\n                    ) : (\r\n                        \"UNAVAILABLE\"\r\n                    ))}\r\n                </CTAButton>\r\n                <Minus\r\n                    disabled={\r\n                        clicked ||\r\n                        candyMachine?.state.isSoldOut ||\r\n                        isSoldOut ||\r\n                        isMinting ||\r\n                        isEnded ||\r\n                        !isActive ||\r\n                        isVerifying\r\n                    }\r\n                    onClick={() => decrementValue()}\r\n                >-</Minus>\r\n                <NumericField\r\n                    disabled={\r\n                        clicked ||\r\n                        candyMachine?.state.isSoldOut ||\r\n                        isSoldOut ||\r\n                        isMinting ||\r\n                        isEnded ||\r\n                        !isActive ||\r\n                        isVerifying\r\n                    }\r\n                    type=\"number\"\r\n                    className=\"mint-qty\"\r\n                    step={1}\r\n                    min={1}\r\n                    max={10}\r\n                    value={mintCount}\r\n                    onChange={(e) => updateMintCount((e.target as any))}\r\n                />\r\n                <Plus\r\n                    disabled={\r\n                        clicked ||\r\n                        candyMachine?.state.isSoldOut ||\r\n                        isSoldOut ||\r\n                        isMinting ||\r\n                        isEnded ||\r\n                        !isActive ||\r\n                        isVerifying\r\n                    }\r\n                    onClick={() => incrementValue()}\r\n                >+</Plus>\r\n            </div>\r\n            {!candyMachine?.state.isSoldOut && !isSoldOut && isActive &&\r\n              <h3>Total estimated cost (Solana fees included) : {totalCost} SOL</h3>}\r\n        </div>\r\n    );\r\n};\r\n","import {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\r\nimport {useAnchorWallet} from \"@solana/wallet-adapter-react\";\r\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\r\nimport {GatewayProvider} from '@civic/solana-gateway-react';\r\nimport Countdown from \"react-countdown\";\r\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport {toDate, AlertState, getAtaForMint} from './utils';\r\nimport {MintButton} from './MintButton';\r\nimport {MultiMintButton} from './MultiMintButton';\r\nimport {\r\n    CandyMachine,\r\n    awaitTransactionSignatureConfirmation,\r\n    getCandyMachineState,\r\n    mintOneToken,\r\n    mintMultipleToken,\r\n    CANDY_MACHINE_PROGRAM,\r\n} from \"./candy-machine\";\r\n\r\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\r\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\r\n\r\nconst WalletContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: right;\r\n`;\r\n\r\nconst WalletAmount = styled.div`\r\n  color: black;\r\n  width: auto;\r\n  padding: 5px 5px 5px 16px;\r\n  min-width: 48px;\r\n  min-height: auto;\r\n  border-radius: 22px;\r\n  background-color: var(--main-text-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  box-sizing: border-box;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-weight: 500;\r\n  line-height: 1.75;\r\n  text-transform: uppercase;\r\n  border: 0;\r\n  margin: 0;\r\n  display: inline-flex;\r\n  outline: 0;\r\n  position: relative;\r\n  align-items: center;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  justify-content: flex-start;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Wallet = styled.ul`\r\n  flex: 0 0 auto;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst ConnectButton = styled(WalletMultiButton)`\r\n  border-radius: 18px !important;\r\n  padding: 6px 16px;\r\n  background-color: #4E44CE;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst NFT = styled(Paper)`\r\n  min-width: 500px;\r\n  margin: 0 auto;\r\n  padding: 5px 20px 20px 20px;\r\n  flex: 1 1 auto;\r\n  background-color: var(--card-background-color) !important;\r\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22) !important;\r\n`;\r\n\r\nconst Card = styled(Paper)`\r\n  display: inline-block;\r\n  background-color: var(--countdown-background-color) !important;\r\n  margin: 5px;\r\n  min-width: 40px;\r\n  padding: 24px;\r\n  h1{\r\n    margin:0px;\r\n  }\r\n`;\r\n\r\nconst MintButtonContainer = styled.div`\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\r\n    color: #464646;\r\n  }\r\n\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\r\n    -webkit-animation: pulse 1s;\r\n    animation: pulse 1s;\r\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\r\n  }\r\n\r\n  @-webkit-keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n\r\n  @keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n`;\r\n\r\nconst SolExplorerLink = styled.a`\r\n  color: var(--title-text-color);\r\n  border-bottom: 1px solid var(--title-text-color);\r\n  font-weight: bold;\r\n  list-style-image: none;\r\n  list-style-position: outside;\r\n  list-style-type: none;\r\n  outline: none;\r\n  text-decoration: none;\r\n  text-size-adjust: 100%;\r\n\r\n  :hover {\r\n    border-bottom: 2px solid var(--title-text-color);\r\n  }\r\n`;\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  margin-right: 4%;\r\n  margin-left: 4%;\r\n  text-align: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1 1 auto;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n`;\r\n\r\nconst DesContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 1 auto;\r\n  gap: 20px;\r\n`;\r\n\r\nconst Price = styled(Chip)`\r\n  position: absolute;\r\n  margin: 5px;\r\n  font-weight: bold;\r\n  font-size: 1.2em !important;\r\n  font-family: 'Patrick Hand', cursive !important;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  height: 400px;\r\n  width: auto;\r\n  border-radius: 7px;\r\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\r\n`;\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)`\r\n  margin: 20px;\r\n  height: 10px !important;\r\n  border-radius: 30px;\r\n  border: 2px solid white;\r\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\r\n  background-color:var(--main-text-color) !important;\r\n  \r\n  > div.MuiLinearProgress-barColorPrimary{\r\n    background-color:var(--title-text-color) !important;\r\n  }\r\n\r\n  > div.MuiLinearProgress-bar1Determinate {\r\n    border-radius: 30px !important;\r\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\r\n  }\r\n`;\r\n\r\nexport interface HomeProps {\r\n    candyMachineId: anchor.web3.PublicKey;\r\n    connection: anchor.web3.Connection;\r\n    txTimeout: number;\r\n    rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n    const [balance, setBalance] = useState<number>();\r\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\r\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n    const [itemsAvailable, setItemsAvailable] = useState(0);\r\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n    const [itemsRemaining, setItemsRemaining] = useState(0);\r\n    const [isSoldOut, setIsSoldOut] = useState(false);\r\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n    const [price, setPrice] = useState(0);\r\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n    const [isBurnToken, setIsBurnToken] = useState(false);\r\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n    const [isEnded, setIsEnded] = useState(false);\r\n    const [endDate, setEndDate] = useState<Date>();\r\n    const [isPresale, setIsPresale] = useState(false);\r\n    const [isWLOnly, setIsWLOnly] = useState(false);\r\n\r\n    const [alertState, setAlertState] = useState<AlertState>({\r\n        open: false,\r\n        message: \"\",\r\n        severity: undefined,\r\n    });\r\n\r\n    const wallet = useAnchorWallet();\r\n    const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n    const rpcUrl = props.rpcHost;\r\n    const solFeesEstimation = 0.012; // approx of account creation fees\r\n\r\n    const refreshCandyMachineState = () => {\r\n        (async () => {\r\n            if (!wallet) return;\r\n\r\n            const cndy = await getCandyMachineState(\r\n                wallet as anchor.Wallet,\r\n                props.candyMachineId,\r\n                props.connection\r\n            );\r\n\r\n            setCandyMachine(cndy);\r\n            setItemsAvailable(cndy.state.itemsAvailable);\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n            setItemsRedeemed(cndy.state.itemsRedeemed);\r\n\r\n            var divider = 1;\r\n            if (decimals) {\r\n                divider = +('1' + new Array(decimals).join('0').slice() + '0');\r\n            }\r\n\r\n            // detect if using spl-token to mint\r\n            if (cndy.state.tokenMint) {\r\n                setPayWithSplToken(true);\r\n                // Customize your SPL-TOKEN Label HERE\r\n                // TODO: get spl-token metadata name\r\n                setPriceLabel(splTokenName);\r\n                setPrice(cndy.state.price.toNumber() / divider);\r\n                setWhitelistPrice(cndy.state.price.toNumber() / divider);\r\n            } else {\r\n                setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n                setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n            }\r\n\r\n\r\n            // fetch whitelist token balance\r\n            if (cndy.state.whitelistMintSettings) {\r\n                setWhitelistEnabled(true);\r\n                setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\r\n                setIsPresale(cndy.state.whitelistMintSettings.presale);\r\n                setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\r\n\r\n                if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\r\n                    if (cndy.state.tokenMint) {\r\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\r\n                    } else {\r\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\r\n                    }\r\n                }\r\n\r\n                let balance = 0;\r\n                try {\r\n                    const tokenBalance =\r\n                        await props.connection.getTokenAccountBalance(\r\n                            (\r\n                                await getAtaForMint(\r\n                                    cndy.state.whitelistMintSettings.mint,\r\n                                    wallet.publicKey,\r\n                                )\r\n                            )[0],\r\n                        );\r\n\r\n                    balance = tokenBalance?.value?.uiAmount || 0;\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    balance = 0;\r\n                }\r\n                setWhitelistTokenBalance(balance);\r\n                setIsActive(isPresale && !isEnded && balance > 0);\r\n            } else {\r\n                setWhitelistEnabled(false);\r\n            }\r\n\r\n            // end the mint when date is reached\r\n            if (cndy?.state.endSettings?.endSettingType.date) {\r\n                setEndDate(toDate(cndy.state.endSettings.number));\r\n                if (\r\n                    cndy.state.endSettings.number.toNumber() <\r\n                    new Date().getTime() / 1000\r\n                ) {\r\n                    setIsEnded(true);\r\n                    setIsActive(false);\r\n                }\r\n            }\r\n            // end the mint when amount is reached\r\n            if (cndy?.state.endSettings?.endSettingType.amount) {\r\n                let limit = Math.min(\r\n                    cndy.state.endSettings.number.toNumber(),\r\n                    cndy.state.itemsAvailable,\r\n                );\r\n                setItemsAvailable(limit);\r\n                if (cndy.state.itemsRedeemed < limit) {\r\n                    setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n                } else {\r\n                    setItemsRemaining(0);\r\n                    cndy.state.isSoldOut = true;\r\n                    setIsEnded(true);\r\n                }\r\n            } else {\r\n                setItemsRemaining(cndy.state.itemsRemaining);\r\n            }\r\n\r\n            if (cndy.state.isSoldOut) {\r\n                setIsActive(false);\r\n            }\r\n        })();\r\n    };\r\n\r\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\r\n        return (\r\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\r\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\r\n                <h1>{seconds}</h1>Secs</Card></div>\r\n        );\r\n    };\r\n\r\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\r\n        let label = \"\";\r\n        if (days > 0) {\r\n            label += days + \" days \"\r\n        }\r\n        if (hours > 0) {\r\n            label += hours + \" hours \"\r\n        }\r\n        label += (minutes+1) + \" minutes left to MINT.\"\r\n        return (\r\n            <div><h3>{label}</h3></div>\r\n        );\r\n    };\r\n\r\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\r\n        let remaining = itemsRemaining - qty;\r\n        setItemsRemaining(remaining);\r\n        setIsSoldOut(remaining === 0);\r\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\r\n            let balance = whitelistTokenBalance - qty;\r\n            setWhitelistTokenBalance(balance);\r\n            setIsActive(isPresale && !isEnded && balance > 0);\r\n        }\r\n        setItemsRedeemed(itemsRedeemed + qty);\r\n        if (!payWithSplToken && balance && balance > 0) {\r\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\r\n        }\r\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\r\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\r\n            : (\"https://solscan.io/token/\" + mintPublicKey));\r\n        throwConfetti();\r\n    };\r\n\r\n    function throwConfetti(): void {\r\n        confetti({\r\n            particleCount: 400,\r\n            spread: 70,\r\n            origin: {y: 0.6},\r\n        });\r\n    }\r\n\r\n    function sleep(ms: number): Promise<void> {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    async function mintMany(quantityString: number) {\r\n        if (wallet && candyMachine?.program && wallet.publicKey) {\r\n            const quantity = Number(quantityString);\r\n            const futureBalance = (balance || 0) - ((whitelistEnabled && (whitelistTokenBalance > 0) ? whitelistPrice : price) * quantity);\r\n            const signedTransactions: any = await mintMultipleToken(\r\n                candyMachine,\r\n                wallet.publicKey,\r\n                quantity\r\n            );\r\n\r\n            const promiseArray = [];\r\n\r\n            for (\r\n                let index = 0;\r\n                index < signedTransactions.length;\r\n                index++\r\n            ) {\r\n                const tx = signedTransactions[index];\r\n                promiseArray.push(\r\n                    awaitTransactionSignatureConfirmation(\r\n                        tx,\r\n                        props.txTimeout,\r\n                        props.connection,\r\n                        \"singleGossip\",\r\n                        true\r\n                    )\r\n                );\r\n            }\r\n\r\n            const allTransactionsResult = await Promise.all(promiseArray);\r\n            let totalSuccess = 0;\r\n            let totalFailure = 0;\r\n\r\n            for (\r\n                let index = 0;\r\n                index < allTransactionsResult.length;\r\n                index++\r\n            ) {\r\n                const transactionStatus = allTransactionsResult[index];\r\n                if (!transactionStatus?.err) {\r\n                    totalSuccess += 1;\r\n                } else {\r\n                    totalFailure += 1;\r\n                }\r\n            }\r\n\r\n            let retry = 0;\r\n            if (allTransactionsResult.length > 0) {\r\n                let newBalance =\r\n                    (await props.connection.getBalance(wallet.publicKey)) /\r\n                    LAMPORTS_PER_SOL;\r\n\r\n\r\n                while (newBalance > futureBalance && retry < 20) {\r\n                    await sleep(2000);\r\n                    newBalance =\r\n                        (await props.connection.getBalance(wallet.publicKey)) /\r\n                        LAMPORTS_PER_SOL;\r\n                    retry++;\r\n                    console.log(\"Estimated balance (\" + futureBalance + \") not correct yet, wait a little bit and re-check. Current balance : \" + newBalance + \", Retry \" + retry);\r\n                }\r\n            }\r\n\r\n            if (totalSuccess && retry < 20) {\r\n                setAlertState({\r\n                    open: true,\r\n                    message: `Congratulations! Your ${quantity} mints succeeded!`,\r\n                    severity: 'success',\r\n                });\r\n\r\n                // update front-end amounts\r\n                displaySuccess(wallet.publicKey, quantity);\r\n            }\r\n\r\n            if (totalFailure || retry === 20) {\r\n                setAlertState({\r\n                    open: true,\r\n                    message: `Some mints failed! (possibly ${totalFailure}) Wait a few minutes and check your wallet.`,\r\n                    severity: 'error',\r\n                });\r\n            }\r\n\r\n            if (totalFailure === 0 && totalSuccess === 0) {\r\n                setAlertState({\r\n                    open: true,\r\n                    message: `Mints manually cancelled.`,\r\n                    severity: 'error',\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async function mintOne() {\r\n        if (wallet && candyMachine?.program && wallet.publicKey) {\r\n            const mint = anchor.web3.Keypair.generate();\r\n            const mintTxId = (\r\n                await mintOneToken(candyMachine, wallet.publicKey, mint)\r\n            )[0];\r\n\r\n            let status: any = {err: true};\r\n            if (mintTxId) {\r\n                status = await awaitTransactionSignatureConfirmation(\r\n                    mintTxId,\r\n                    props.txTimeout,\r\n                    props.connection,\r\n                    'singleGossip',\r\n                    true,\r\n                );\r\n            }\r\n\r\n            if (!status?.err) {\r\n                setAlertState({\r\n                    open: true,\r\n                    message: 'Congratulations! Mint succeeded!',\r\n                    severity: 'success',\r\n                });\r\n\r\n                // update front-end amounts\r\n                displaySuccess(mint.publicKey);\r\n            } else {\r\n                setAlertState({\r\n                    open: true,\r\n                    message: 'Mint failed! Please try again!',\r\n                    severity: 'error',\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const startMint = async (quantityString: number) => {\r\n        try {\r\n            setIsMinting(true);\r\n            if (quantityString === 1) {\r\n                await mintOne();\r\n            } else {\r\n                await mintMany(quantityString);\r\n            }\r\n        } catch (error: any) {\r\n            let message = error.msg || 'Minting failed! Please try again!';\r\n            if (!error.msg) {\r\n                if (!error.message) {\r\n                    message = 'Transaction Timeout! Please try again.';\r\n                } else if (error.message.indexOf('0x138')) {\r\n                } else if (error.message.indexOf('0x137')) {\r\n                    message = `SOLD OUT!`;\r\n                } else if (error.message.indexOf('0x135')) {\r\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\r\n                }\r\n            } else {\r\n                if (error.code === 311) {\r\n                    message = `SOLD OUT!`;\r\n                } else if (error.code === 312) {\r\n                    message = `Minting period hasn't started yet.`;\r\n                }\r\n            }\r\n\r\n            setAlertState({\r\n                open: true,\r\n                message,\r\n                severity: \"error\",\r\n            });\r\n        } finally {\r\n            setIsMinting(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (wallet) {\r\n                const balance = await props.connection.getBalance(wallet.publicKey);\r\n                setBalance(balance / LAMPORTS_PER_SOL);\r\n            }\r\n        })();\r\n    }, [wallet, props.connection]);\r\n\r\n    useEffect(refreshCandyMachineState, [\r\n        wallet,\r\n        props.candyMachineId,\r\n        props.connection,\r\n        isEnded,\r\n        isPresale\r\n    ]);\r\n\r\n    return (\r\n        <main>\r\n            <MainContainer>\r\n                <WalletContainer>\r\n                    <Wallet>\r\n                        {wallet ?\r\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\r\n                            <ConnectButton>Connect Wallet</ConnectButton>}\r\n                    </Wallet>\r\n                </WalletContainer>\r\n                <br/>\r\n                <MintContainer>\r\n                    <DesContainer>\r\n                        <NFT elevation={3}>\r\n                            <h2>My NFT</h2>\r\n                            <br/>\r\n                            <div><Price\r\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\r\n                                src=\"cool-cats.gif\"\r\n                                alt=\"NFT To Mint\"/></div>\r\n                            <br/>\r\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\r\n                              <h3>You own {whitelistTokenBalance} WL mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\" }.</h3>}\r\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\r\n                              <h3>You are whitelisted and allowed to mint.</h3>}\r\n                            {wallet && isActive && endDate && Date.now() < endDate.getTime() &&\r\n                              <Countdown\r\n                                date={toDate(candyMachine?.state?.endSettings?.number)}\r\n                                onMount={({completed}) => completed && setIsEnded(true)}\r\n                                onComplete={() => {\r\n                                    setIsEnded(true);\r\n                                }}\r\n                                renderer={renderEndDateCounter}\r\n                              />}\r\n                            {wallet && isActive &&\r\n                              <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\r\n                            {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\r\n                                                                         value={100 - (itemsRemaining * 100 / itemsAvailable)}/>}\r\n                            <br/>\r\n                            <MintButtonContainer>\r\n                                {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? (\r\n                                    <Countdown\r\n                                        date={toDate(candyMachine?.state.goLiveDate)}\r\n                                        onMount={({completed}) => completed && setIsActive(!isEnded)}\r\n                                        onComplete={() => {\r\n                                            setIsActive(!isEnded);\r\n                                        }}\r\n                                        renderer={renderGoLiveDateCounter}\r\n                                    />) : (\r\n                                    !wallet ? (\r\n                                            <ConnectButton>Connect Wallet</ConnectButton>\r\n                                        ) : (!isWLOnly || whitelistTokenBalance > 0) ?\r\n                                        candyMachine?.state.gatekeeper &&\r\n                                        wallet.publicKey &&\r\n                                        wallet.signTransaction ? (\r\n                                            <GatewayProvider\r\n                                                wallet={{\r\n                                                    publicKey:\r\n                                                        wallet.publicKey ||\r\n                                                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                                                    //@ts-ignore\r\n                                                    signTransaction: wallet.signTransaction,\r\n                                                }}\r\n                                                // // Replace with following when added\r\n                                                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                                                gatekeeperNetwork={\r\n                                                    candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                                                } // This is the ignite (captcha) network\r\n                                                /// Don't need this for mainnet\r\n                                                clusterUrl={rpcUrl}\r\n                                                options={{autoShowModal: false}}\r\n                                            >\r\n                                                <MintButton\r\n                                                    candyMachine={candyMachine}\r\n                                                    isMinting={isMinting}\r\n                                                    isActive={isActive}\r\n                                                    isEnded={isEnded}\r\n                                                    isSoldOut={isSoldOut}\r\n                                                    onMint={startMint}\r\n                                                />\r\n                                            </GatewayProvider>\r\n                                        ) : (\r\n                                            /*<MintButton\r\n                                                candyMachine={candyMachine}\r\n                                                isMinting={isMinting}\r\n                                                isActive={isActive}\r\n                                                isEnded={isEnded}\r\n                                                isSoldOut={isSoldOut}\r\n                                                onMint={startMint}\r\n                                            />*/\r\n                                            <MultiMintButton\r\n                                                candyMachine={candyMachine}\r\n                                                isMinting={isMinting}\r\n                                                isActive={isActive}\r\n                                                isEnded={isEnded}\r\n                                                isSoldOut={isSoldOut}\r\n                                                onMint={startMint}\r\n                                                price={whitelistEnabled && (whitelistTokenBalance > 0) ? whitelistPrice : price}\r\n                                            />\r\n                                        ) :\r\n                                        <h1>Mint is private.</h1>\r\n                                        )}\r\n                            </MintButtonContainer>\r\n                            <br/>\r\n                            {wallet && isActive && solanaExplorerLink &&\r\n                              <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on Solscan</SolExplorerLink>}\r\n                        </NFT>\r\n                    </DesContainer>\r\n                </MintContainer>\r\n            </MainContainer>\r\n            <Snackbar\r\n                open={alertState.open}\r\n                autoHideDuration={6000}\r\n                onClose={() => setAlertState({...alertState, open: false})}\r\n            >\r\n                <Alert\r\n                    onClose={() => setAlertState({...alertState, open: false})}\r\n                    severity={alertState.severity}\r\n                >\r\n                    {alertState.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolflareWebWallet,\r\n    getSolletWallet,\r\n    getSolletExtensionWallet,\r\n    getSolongWallet,\r\n    getLedgerWallet,\r\n    getSafePalWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n    WalletModalProvider\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nimport \"./App.css\";\r\nimport Home from \"./Home\";\r\n\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n    // Custom RPC endpoint.\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\r\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\r\n    // of wallets that your users connect to will be loaded.\r\n    const wallets = useMemo(\r\n        () => [\r\n            getPhantomWallet(),\r\n            getSlopeWallet(),\r\n            getSolflareWallet(),\r\n            getSolflareWebWallet(),\r\n            getSolletWallet({ network }),\r\n            getSolletExtensionWallet({ network }),\r\n            getSolongWallet(),\r\n            getLedgerWallet(),\r\n            getSafePalWallet(),\r\n        ],\r\n        []\r\n    );\r\n\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect={true}>\r\n            <WalletModalProvider>\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                connection={connection}\r\n                txTimeout={txTimeout}\r\n                rpcHost={rpcHost}\r\n              />\r\n            </WalletModalProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport { sendTransactions } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachine> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        state.data.goLiveDate &&\r\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\r\n        (state.endSettings\r\n          ? state.endSettings.endSettingType.date\r\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n            : itemsRedeemed < state.endSettings.number.toNumber()\r\n          : true),\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const mintMultipleToken = async (\r\n    candyMachine: CandyMachine,\r\n    payer: anchor.web3.PublicKey,\r\n    quantity: number = 2\r\n): Promise<(string | undefined)[]> => {\r\n  const signersMatrix = [];\r\n  const instructionsMatrix = [];\r\n\r\n  for (let index = 0; index < quantity; index++) {\r\n      const mint = anchor.web3.Keypair.generate();\r\n      const userTokenAccountAddress = (\r\n          await getAtaForMint(mint.publicKey, payer)\r\n      )[0];\r\n\r\n      const userPayingAccountAddress = candyMachine.state.tokenMint\r\n          ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n          : payer;\r\n\r\n      const candyMachineAddress = candyMachine.id;\r\n      const remainingAccounts = [];\r\n      const signers: anchor.web3.Keypair[] = [mint];\r\n      const cleanupInstructions = [];\r\n      const instructions = [\r\n          anchor.web3.SystemProgram.createAccount({\r\n              fromPubkey: payer,\r\n              newAccountPubkey: mint.publicKey,\r\n              space: MintLayout.span,\r\n              lamports:\r\n                  await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n                      MintLayout.span,\r\n                  ),\r\n              programId: TOKEN_PROGRAM_ID,\r\n          }),\r\n          Token.createInitMintInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              mint.publicKey,\r\n              0,\r\n              payer,\r\n              payer,\r\n          ),\r\n          createAssociatedTokenAccountInstruction(\r\n              userTokenAccountAddress,\r\n              payer,\r\n              payer,\r\n              mint.publicKey,\r\n          ),\r\n          Token.createMintToInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              mint.publicKey,\r\n              userTokenAccountAddress,\r\n              payer,\r\n              [],\r\n              1,\r\n          ),\r\n      ];\r\n\r\n      // CIVIC\r\n      if (candyMachine.state.gatekeeper) {\r\n          remainingAccounts.push({\r\n              pubkey: (\r\n                  await getNetworkToken(\r\n                      payer,\r\n                      candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                  )\r\n              )[0],\r\n              isWritable: true,\r\n              isSigner: false,\r\n          });\r\n          if (candyMachine.state.gatekeeper.expireOnUse) {\r\n              remainingAccounts.push({\r\n                  pubkey: CIVIC,\r\n                  isWritable: false,\r\n                  isSigner: false,\r\n              });\r\n              remainingAccounts.push({\r\n                  pubkey: (\r\n                      await getNetworkExpire(\r\n                          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                      )\r\n                  )[0],\r\n                  isWritable: false,\r\n                  isSigner: false,\r\n              });\r\n          }\r\n      }\r\n\r\n      // WHITELIST/PRE-SALE\r\n      if (candyMachine.state.whitelistMintSettings) {\r\n          const mint = new anchor.web3.PublicKey(\r\n              candyMachine.state.whitelistMintSettings.mint,\r\n          );\r\n\r\n          const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n          remainingAccounts.push({\r\n              pubkey: whitelistToken,\r\n              isWritable: true,\r\n              isSigner: false,\r\n          });\r\n\r\n          if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n              const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n              remainingAccounts.push({\r\n                  pubkey: mint,\r\n                  isWritable: true,\r\n                  isSigner: false,\r\n              });\r\n              remainingAccounts.push({\r\n                  pubkey: whitelistBurnAuthority.publicKey,\r\n                  isWritable: false,\r\n                  isSigner: true,\r\n              });\r\n              signers.push(whitelistBurnAuthority);\r\n              const exists =\r\n                  await candyMachine.program.provider.connection.getAccountInfo(\r\n                      whitelistToken,\r\n                  );\r\n              if (exists) {\r\n                  instructions.push(\r\n                      Token.createApproveInstruction(\r\n                          TOKEN_PROGRAM_ID,\r\n                          whitelistToken,\r\n                          whitelistBurnAuthority.publicKey,\r\n                          payer,\r\n                          [],\r\n                          1,\r\n                      ),\r\n                  );\r\n                  cleanupInstructions.push(\r\n                      Token.createRevokeInstruction(\r\n                          TOKEN_PROGRAM_ID,\r\n                          whitelistToken,\r\n                          payer,\r\n                          [],\r\n                      ),\r\n                  );\r\n              }\r\n          }\r\n      }\r\n\r\n      // SPL-TOKEN TO MINT\r\n      if (candyMachine.state.tokenMint) {\r\n          const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n          signers.push(transferAuthority);\r\n          remainingAccounts.push({\r\n              pubkey: userPayingAccountAddress,\r\n              isWritable: true,\r\n              isSigner: false,\r\n          });\r\n          remainingAccounts.push({\r\n              pubkey: transferAuthority.publicKey,\r\n              isWritable: false,\r\n              isSigner: true,\r\n          });\r\n\r\n          instructions.push(\r\n              Token.createApproveInstruction(\r\n                  TOKEN_PROGRAM_ID,\r\n                  userPayingAccountAddress,\r\n                  transferAuthority.publicKey,\r\n                  payer,\r\n                  [],\r\n                  candyMachine.state.price.toNumber(),\r\n              ),\r\n          );\r\n          cleanupInstructions.push(\r\n              Token.createRevokeInstruction(\r\n                  TOKEN_PROGRAM_ID,\r\n                  userPayingAccountAddress,\r\n                  payer,\r\n                  [],\r\n              ),\r\n          );\r\n      }\r\n      const metadataAddress = await getMetadata(mint.publicKey);\r\n      const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n      const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n          candyMachineAddress,\r\n      );\r\n\r\n      instructions.push(\r\n          await candyMachine.program.instruction.mintNft(creatorBump, {\r\n              accounts: {\r\n                  candyMachine: candyMachineAddress,\r\n                  candyMachineCreator,\r\n                  payer: payer,\r\n                  wallet: candyMachine.state.treasury,\r\n                  mint: mint.publicKey,\r\n                  metadata: metadataAddress,\r\n                  masterEdition,\r\n                  mintAuthority: payer,\r\n                  updateAuthority: payer,\r\n                  tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n                  tokenProgram: TOKEN_PROGRAM_ID,\r\n                  systemProgram: SystemProgram.programId,\r\n                  rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n                  clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n                  recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n                  instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              },\r\n              remainingAccounts:\r\n                  remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n          }),\r\n      );\r\n\r\n      signersMatrix.push(signers);\r\n      instructionsMatrix.push(instructions);\r\n      if (cleanupInstructions.length > 0) {\r\n          instructionsMatrix.push(cleanupInstructions);\r\n          signersMatrix.push([]);\r\n      }\r\n\r\n  }\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n    candyMachine: CandyMachine,\r\n    payer: anchor.web3.PublicKey,\r\n    mint: anchor.web3.Keypair\r\n): Promise<(string | undefined)[]> => {\r\n  const userTokenAccountAddress = (\r\n      await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n      ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n      : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span,\r\n          ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n        userTokenAccountAddress,\r\n        payer,\r\n        payer,\r\n        mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        userTokenAccountAddress,\r\n        payer,\r\n        [],\r\n        1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n          await getNetworkToken(\r\n              payer,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n            await getNetworkExpire(\r\n                candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n            )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n        candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n          await candyMachine.program.provider.connection.getAccountInfo(\r\n              whitelistToken,\r\n          );\r\n      if (exists) {\r\n        instructions.push(\r\n            Token.createApproveInstruction(\r\n                TOKEN_PROGRAM_ID,\r\n                whitelistToken,\r\n                whitelistBurnAuthority.publicKey,\r\n                payer,\r\n                [],\r\n                1,\r\n            ),\r\n        );\r\n        cleanupInstructions.push(\r\n            Token.createRevokeInstruction(\r\n                TOKEN_PROGRAM_ID,\r\n                whitelistToken,\r\n                payer,\r\n                [],\r\n            ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n        Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            userPayingAccountAddress,\r\n            transferAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            candyMachine.state.price.toNumber(),\r\n        ),\r\n    );\r\n    cleanupInstructions.push(\r\n        Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            userPayingAccountAddress,\r\n            payer,\r\n            [],\r\n        ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n      candyMachineAddress,\r\n  );\r\n\r\n  instructions.push(\r\n      await candyMachine.program.instruction.mintNft(creatorBump, {\r\n        accounts: {\r\n          candyMachine: candyMachineAddress,\r\n          candyMachineCreator,\r\n          payer: payer,\r\n          wallet: candyMachine.state.treasury,\r\n          mint: mint.publicKey,\r\n          metadata: metadataAddress,\r\n          masterEdition,\r\n          mintAuthority: payer,\r\n          updateAuthority: payer,\r\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: SystemProgram.programId,\r\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n          recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n          instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n        },\r\n        remainingAccounts:\r\n            remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n      }),\r\n  );\r\n\r\n  try {\r\n    return (\r\n        await sendTransactions(\r\n            candyMachine.program.provider.connection,\r\n            candyMachine.program.provider.wallet,\r\n            [instructions, cleanupInstructions],\r\n            [signers, []],\r\n        )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}"],"sourceRoot":""}